ReactJS
ReactJS = HTML + JS = JSX
A JavaScript Library for building UI
React Library - contains Class - created by React Team
-----------------------------------------------------------
Function = block of code to perform a particular task
function mylogin(parameter) {
    console.log('Hello Function');
    return value
}
mylogin(argument) // declare a function
----------------------------------------------------------
Alternative for function is arrow function
let mylogin = () => { }   // Arrow function 
------------------------------------------------------------
Alreat() will not work on client side
--------------------------------------------------------------
OOPS : EPIA
Encapsulation: contains - class, Constructor - Properties & methods ex- super(), 
Polymorphism: method overloading. duplicate a methos is Polymorphism. ex add(), add(loading)
Inheritance: code reusability - paren & child 
Abstract - 

Web Application - Encapsulation
Login Page
        username
        password

        logincheck()  // validation function

Important / DOM - FUN - EVENT
-----------------------------------------------------
What is React ?
JavaScript Library for building UI/UX
UI - User Interface / View Layer
UX - User Experences
facebook created ReactJS, Best Performance
------------------------------------------------------------
React JS (Front End) --> Server Side --> Database
---------------------------------------------------------
React has 2 Library: 
1. React Component API -> core 
2. React DOM -> document object model
--------------------------------------------------
Virtual DOM 

React Components: Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
EX: index page, Login page, About page.

How to create React Component ? 2 types
1. Function based -> static - simple Component. Static web page EX: Nav bar.
2. Class based -> OOPS -> Server side dependent -> Business logic complex needed class. EX: Emp data of 5000.
--------------------------------------------------------------------------------------------------------------------------------------

SPA: Single Page Application -> ReactJS 
Parent Component = Root Component -> Child
JSX = HTML + JS 
-------------------------------------------------------
$  Class file name should be in capital letter  $
--------------------------------------------------------
Function and Class Component

React.Fragments - if mutiple child Components used in file. (<></>)
1. Function component
ex:
    function Welcome(props) {
      return (<>
      <h1>Hello, {props.name}</h1>;
      </>)
    }

Props = Properties - one way communication Ex: Parent to Child relationship
Props: Communication between two Components
Props can have mutiple arguments
Props can share data fromParent to child only. 
props is read only 

Props is to read data

2. Class Component
ex: 
    class Welcome extends React.Component {
      Constructor(){
        super()

      }
      this.
      render() {
        return (<>
        <h1>Hello, {this.props.name}</h1>;
        </>)
      }
    }
extends React.Component (parent) class needs component behavior so inherit's the 
class contains method(), ex: Constructor(),
class contains Constructor, 
class contains its a part of class structure .this is reffering to currect Object
-------------------------------------------------------------------------------===
Difference between Function & Component

Function Based (static Website)- stateless
Componenet Based (data management frm serverside)- state
---------------------------------------------------------------------

Constructor(){ // initilaise object value
  super // to inherin the value
}



OOPS - Class based Component --> Constructor --> this: reffering to current object -> 
OOPS -> complex logic - CRUD -> serverside
class component state {object} - data management -> server side communication
events- react events & JS events  while we use bind





{"ast":null,"code":"// import { createStore } from 'redux'; // step-1 i import createStore from redux\nimport { createSlice } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialCounterState,\n  reducers: {\n    inc(state) {\n      state.counter++;\n    },\n    dcr(state) {\n      state.counter--;\n    },\n    inc5(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\ncreateSlick;\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); // step -2 assin createStore to identify store, //  step-4 keep reducer into store\n\nexport const counterActions = counterSlice.actions;\nexport default store; // step-5 export 1 store  // nxt to index.js to provide data from store\n\n/* const counterReducer = (state = initialState, action) => { // step-3 Create Reducer\r\n    if (action.type === 'inc') {\r\n        return {\r\n            counter: state.counter + 1,  // create a new object in Reducer\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'icr5') {\r\n        return {\r\n            counter: state.counter + action.high,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'dcr') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'toggle') {\r\n        return {\r\n            showCounter: !state.showCounter,\r\n            counter: state.counter\r\n        }\r\n    }\r\n\r\n    return state\r\n}; */","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","reducers","inc","state","dcr","inc5","action","payload","toggle","createSlick","store","reducer","counterActions","actions"],"sources":["D:/Fullstack Training/React/Udemy Redux/01-starting-project/src/store/storeindex.js"],"sourcesContent":["// import { createStore } from 'redux'; // step-1 i import createStore from redux\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true }\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialCounterState,\r\n    reducers: {\r\n        inc(state) {\r\n            state.counter++;\r\n        },\r\n\r\n        dcr(state) {\r\n            state.counter--;\r\n        },\r\n\r\n        inc5(state, action) {\r\n            state.counter = state.counter + action.payload\r\n        },\r\n\r\n        toggle(state) {\r\n            state.showCounter = !state.showCounter\r\n        }\r\n    }\r\n});\r\n\r\ncreateSlick\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: counterSlice.reducer\r\n}) // step -2 assin createStore to identify store, //  step-4 keep reducer into store\r\n\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default store; // step-5 export 1 store  // nxt to index.js to provide data from store\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* const counterReducer = (state = initialState, action) => { // step-3 Create Reducer\r\n    if (action.type === 'inc') {\r\n        return {\r\n            counter: state.counter + 1,  // create a new object in Reducer\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'icr5') {\r\n        return {\r\n            counter: state.counter + action.high,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'dcr') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'toggle') {\r\n        return {\r\n            showCounter: !state.showCounter,\r\n            counter: state.counter\r\n        }\r\n    }\r\n\r\n    return state\r\n}; */"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAE7D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfJ,mBAAmB;EACnBK,QAAQ,EAAE;IACNC,GAAGA,CAACC,KAAK,EAAE;MACPA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IAEDO,GAAGA,CAACD,KAAK,EAAE;MACPA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IAEDQ,IAAIA,CAACF,KAAK,EAAEG,MAAM,EAAE;MAChBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAClD,CAAC;IAEDC,MAAMA,CAACL,KAAK,EAAE;MACVA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEFW,WAAW;AAGX,MAAMC,KAAK,GAAGf,cAAc,CAAC;EACzBgB,OAAO,EAAEZ,YAAY,CAACY;AAC1B,CAAC,CAAC,EAAC;;AAEH,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAAO;AAElD,eAAeH,KAAK,CAAC,CAAC;;AAQtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}